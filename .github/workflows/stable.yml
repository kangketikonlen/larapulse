on:
  push:
    branches:
      - "stable"

env:
  IMAGE_NAME: ${{ github.event.repository.name }}

name: 💽 Create docker image
jobs:
  build:
    runs-on: ubuntu-latest

    environment:
      name: stagging

    steps:
    - name: 🐙 Git checkout
      uses: actions/checkout@v3

    - name: 📁 Make sure repository is latest
      run: git fetch --prune --unshallow

    - name: 🐳 Build image
      run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

    - name: 🔑 Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: 🛳️ Push image
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        LATEST_TAG=$(echo $LATEST_TAG | sed -e 's/^v//')
        echo IMAGE_ID=$IMAGE_ID
        echo LATEST_TAG=$LATEST_TAG
        echo "NEW_TAG=$LATEST_TAG" >> $GITHUB_ENV
        docker tag $IMAGE_NAME $IMAGE_ID:$LATEST_TAG
        docker push $IMAGE_ID:$LATEST_TAG

    - name: 🚀 Update server
      uses: cross-the-world/ssh-scp-ssh-pipelines@latest
      with:
        host: ${{ secrets.SERVER }}
        user: ${{ secrets.USERNAME }}
        pass: ${{ secrets.PASSOWRD }}
        port: ${{ secrets.PORT }}
        connect_timeout: 120s
        first_ssh: |
          cd ${{ secrets.DIRECTORY }}
          sed -i "s/IMAGE_VERSION=.*/IMAGE_VERSION=${{ env.NEW_TAG }}/g" run.sh
          bash run.sh
