on:
  push:
    branches:
      - "testing"

env:
  image_name: ${{ github.event.repository.name }}

jobs:
  test:
    name: ‚úÖ Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testing
          MYSQL_DATABASE: larapulse
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1

      - name: Install Dependencies
        run: composer install --no-interaction

      - name: Copy Environment
        run: cp .env.example .env

      - name: Generate App Key
        run: php artisan key:generate

      - name: Set Up Database
        run: php artisan migrate --seed --env=testing

      - name: Check Routes
        run: php artisan route:clear && php artisan route:list

      - name: Run PHP Tests
        run: vendor/bin/phpunit

  tagging:
    needs: test
    name: üè∑Ô∏è Tagging the app
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Create Tag
        uses: kangketikonlen/base-tagging@main
        env:
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_TYPE: ${{ github.event.repository.owner.type }}
          REPO_OWNER: ${{ github.event.repository.owner.name }}
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          PRESERVE_VERSION: 5

  build:
    needs: [test, tagging]
    name: üì¶ Build the app
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.push-image.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: |
          docker build . --file Dockerfile --tag $image_name --label "runnumber=${GITHUB_RUN_ID}"
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) | sed -e 's/^v//')
          echo "version=$latest_tag" >> $GITHUB_ENV

      - name: Log in to Docker Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker Image
        run: |
          image_id=ghcr.io/${{ github.repository_owner }}/$image_name
          image_id=$(echo $image_id | tr '[A-Z]' '[a-z]')
          latest_tag=${{ steps.push-image.outputs.version }}
          echo image_id=$image_id
          echo latest_tag=$latest_tag
          docker tag $image_name $image_id:$latest_tag
          docker push $image_id:$latest_tag

  deploy:
    needs: [test, tagging, build]
    name: üñ•Ô∏è Upload to server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Update Server
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        with:
          host: ${{ secrets.SERVER }}
          user: ${{ secrets.USERNAME }}
          pass: ${{ secrets.PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          connect_timeout: 120s
          first_ssh: |
            cd ${{ secrets.DIRECTORY }}
            sed -i "s/IMAGE_VERSION=.*/IMAGE_VERSION=${{ needs.build.outputs.latest_version }}/g" run.sh
            bash run.sh

  check-server:
    needs: deploy
    name: üåê Check Server Status
    runs-on: ubuntu-latest

    steps:
      - name: Check Server Status
        run: |
          server_ip=${{ secrets.SERVER }}
          server_port=${{ secrets.WEB_PORT }}
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$server_ip:$server_port)

          if [[ "$response" -eq 200 ]]; then
            echo "Server is up and running!"
          else
            echo "Server is not responding."
            exit 1
          fi
